#version 440 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

#include "util.glsl"

uniform float uAccelStep;
uniform vec3 uPrevEmitterPos;
uniform vec3 uEmitterPos;

struct Particle {
    vec4  color;
    vec3  position;
    vec3  velocity;
    float age;
    float lifespan;
};

layout (std140, binding = 0) buffer Part
{
    Particle particles[];
};

// layout (local_size_variable) in;
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main(void)
{
    uint gID = gl_GlobalInvocationID.x; // The .y and .z are both 1 in this case.

    vec4 color     = particles[gID].color;
    vec3 pos       = particles[gID].position;
    vec3 vel       = particles[gID].velocity;
    float age      = particles[gID].age;
    float lifespan = particles[gID].lifespan;
    
    age += 0.3;
    
    if(age >= lifespan){
        age = 0.0;
        lifespan = 50.0 + 250.0 * abs(random(pos.xy));
        float theta = 2.0 * PI * random(pos.yy);
        float phi = PI * random(pos.zz);
        float r = 5.0 * random(pos.xy);
        vec3 startPos = uPrevEmitterPos + (uEmitterPos - uPrevEmitterPos) * random(pos.yz);
        pos = startPos + vec3(r * sin(theta) * cos(phi), r * sin(theta) * sin(phi), r * cos(theta));
        vel.xyz = vec3(0.0);
    }
    
    vec3 accel = normalize(uEmitterPos - pos);
    accel *= uAccelStep;
    vel += accel;
    pos += vel;
    
    
    particles[gID].color    = color;
    particles[gID].position = pos;
    particles[gID].velocity = vel;
    particles[gID].age      = age;
    particles[gID].lifespan = lifespan;
}
